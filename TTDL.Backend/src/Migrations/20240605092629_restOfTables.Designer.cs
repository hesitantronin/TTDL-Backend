// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace TTDL_Backend.Migrations
{
    [DbContext(typeof(T_DbContext))]
    [Migration("20240605092629_restOfTables")]
    partial class restOfTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TTDL_Backend.Models.Chair", b =>
                {
                    b.Property<string>("ChairId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("BatteryState")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ChairId");

                    b.HasIndex("PatientId")
                        .IsUnique();

                    b.ToTable("Chair");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MeasurementId"));

                    b.Property<bool>("BatteryState")
                        .HasColumnType("boolean");

                    b.Property<string>("ChairId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CurrentPatientId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MeasurementId");

                    b.HasIndex("ChairId");

                    b.HasIndex("CurrentPatientId");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Patient", b =>
                {
                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("TTDL_Backend.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Uname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Chair", b =>
                {
                    b.HasOne("TTDL_Backend.Models.Patient", "Patient")
                        .WithOne("CurrentChair")
                        .HasForeignKey("TTDL_Backend.Models.Chair", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Measurement", b =>
                {
                    b.HasOne("TTDL_Backend.Models.Chair", "Chair")
                        .WithMany("Measurements")
                        .HasForeignKey("ChairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TTDL_Backend.Models.Patient", "CurrentPatient")
                        .WithMany()
                        .HasForeignKey("CurrentPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chair");

                    b.Navigation("CurrentPatient");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Chair", b =>
                {
                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("TTDL_Backend.Models.Patient", b =>
                {
                    b.Navigation("CurrentChair")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
